<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper   PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="tgis.system.member.service.MemberMapper">

	<!-- 관리자 > 사용자 관리 리스트 > 사용자 정보 수정 > 사용자 등록 -->
	<insert id="joinMemberInfo"  parameterType="map">
		<selectKey resultType="string" keyProperty="usrmgeid" order="BEFORE">
			SELECT NVL(MAX(USRMGEID)+1, 1) AS USRMGEID FROM TBL_USR_MGE
		</selectKey>
		<![CDATA[
            INSERT INTO TBL_USR_MGE
                (  USRMGEID,
					USR_ID,
					PW,
					USR_NAM,
					USR_PSTN_NAM,
					BUSE_NAM,
					RMK,
					ROLE_CDE,
					REG_YMD,
					YNO,
					USEYNO,
					PW_CHG_YMD)
            VALUES (#{usrmgeid},
					#{usrId},
					#{pw},
					#{usrNam},
					#{usrPstnNam},
					#{buseNam},
					#{rmk},
					'000', -- 사용자 권한(비로그인)
					TO_CHAR(SYSDATE, 'YYYYMMDD'),
					'N', -- 승인여부(미승인)
					'Y',
					NULL)
	]]>
	</insert>

	<!-- 관리자 > 사용자 관리 리스트 > 사용자 정보 등록 >  -> ID 중복 체크 -->
	<select id="userIdCheck" parameterType="map" resultType="int">
	<![CDATA[
		SELECT COUNT(*) FROM TBL_USR_MGE
		WHERE  USR_ID = #{usrId}
	]]>
	</select>

	<!-- 관리자 > 사용자 관리 리스트 조회 -->
	<select id="selectInfoList" parameterType="map" resultType="egovMap">
		<![CDATA[
			SELECT * FROM ( SELECT ROWNUM RN, TB.*, COUNT(*) OVER() AS TOTALROWS
			 FROM (
						SELECT
							USRMGEID,
							USR_ID,
							USR_NAM,
							USR_PSN,
							USR_PSTN_NAM,
							BUSE_NAM,
							RMK,
							SUBSTR(REG_YMD, 0, 4) || '-' || SUBSTR(REG_YMD, 5, 2) || '-' || SUBSTR(REG_YMD, 7, 2) AS REG_YMD,
							YNO,
							DECODE(YNO, 'Y', '승인', '미승인') AS YNO_NAM,
							USEYNO,
							ROLE_CDE
						FROM
							TBL_USR_MGE A
						WHERE
							USR_ID IS NOT NULL
		]]>
		<choose>
			<when test="schMgr == 'usrAll'">
				<if test='searchMgrkw != "" and searchMgrkw != null'>
					<![CDATA[ AND ( USR_ID LIKE '%' || #{searchMgrkw} || '%' OR USR_NAM LIKE '%' || #{searchMgrkw} || '%' )	]]>
				</if>
			</when>
			<when test="schMgr == 'usrId'">
				<if test='searchMgrkw != "" and searchMgrkw != null'>
					<![CDATA[ AND USR_ID LIKE '%' || #{searchMgrkw} || '%'	]]>
				</if>
			</when>
			<when test="schMgr == 'usrNam'">
				<if test='searchMgrkw != "" and searchMgrkw != null'>
					<![CDATA[ AND USR_NAM LIKE '%' || #{searchMgrkw} || '%'	]]>
				</if>
			</when>
		</choose>
		<![CDATA[
						ORDER BY
							REG_YMD DESC
				) TB ) WHERE RN BETWEEN #{rows} * ( #{page} - 1 ) + 1 AND #{rows}* #{page}
		]]>
	</select>

	<!-- 관리자 > 사용자 관리 리스트 > 사용자 정보 수정 > 사용자 등록 -->
	<insert id="insertInfo"  parameterType="map">
		<selectKey resultType="string" keyProperty="usrmgeid" order="BEFORE">
			SELECT NVL(MAX(USRMGEID)+1, 1) AS USRMGEID FROM TBL_USR_MGE
		</selectKey>
		<![CDATA[
			INSERT INTO TBL_USR_MGE
				(  USRMGEID,
					USR_ID,
					PW,
					USR_NAM,
					USR_PSTN_NAM,
					BUSE_NAM,
					ROLE_CDE,
					REG_YMD,
					YNO,
					USEYNO,
					PW_CHG_YMD,
					RMK)
			VALUES (#{usrmgeid},
					#{usrId},
					#{pw},
					#{usrNam},
					#{usrPstnNam},
					#{buseNam},
					#{roleCde},
					TO_CHAR(SYSDATE, 'YYYYMMDD'),
					#{yno},
					#{useyno},
					TO_CHAR(SYSDATE, 'YYYYMMDD'),
					#{rmk})
	]]>
	</insert>

	<!-- 관리자 > 사용자 관리 리스트 > 사용자 정보 -->
	<select id="selectInfo" parameterType="map" resultType="egovMap">
		<![CDATA[
				SELECT
					USRMGEID,
					USR_ID,
					PW,
					RMK,
					USR_NAM,
					USR_PSTN_NAM,
					BUSE_NAM,
					REG_YMD,
					ROLE_CDE,
					USEYNO,
					TRIM(YNO) AS YNO
				FROM
					TBL_USR_MGE
				WHERE USRMGEID = #{usrmgeid}
		]]>
	</select>

	<!-- 관리자 > 사용자 관리 리스트 > 사용자 정보 수정 > 사용자 수정 -->
	<update id="updateInfo" parameterType="map">
		<![CDATA[
			UPDATE TBL_USR_MGE
			SET
			]]>
		<if test='pw != "" and pw != null'>
			<![CDATA[
					PW = #{pw},
					PW_CHG_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD'),
				]]>
		</if>
		<![CDATA[
				YNO = #{yno},
				USEYNO = #{useyno},
				ROLE_CDE = #{roleCde},
				USR_NAM = #{usrNam},
				USR_PSTN_NAM = #{usrPstnNam},
				BUSE_NAM = #{buseNam},
				RMK = #{rmk}
			WHERE USRMGEID = #{usrmgeid}
		]]>
	</update>

	<!-- 관리자 > 사용자 관리 리스트 > 사용자 정보 수정 > 사용자 차단 -->
	<update id="blockInfo" parameterType="map">
		<![CDATA[
			UPDATE TBL_USR_MGE
			SET
			YNO = 'N'
			WHERE USRMGEID = #{usrmgeid}
		]]>
	</update>

	<!-- 관리자 > 사용자 관리 리스트 > 사용자 정보 수정 > 사용자 비밀번호 초기화 -->
	<update id="updatePwInit" parameterType="map">
		<![CDATA[
			UPDATE TBL_USR_MGE
			SET
			PW = #{pw},
			PW_CHG_YMD = TO_CHAR(SYSDATE, 'YYYYMMDD')
			WHERE USRMGEID = #{usrmgeid}
		]]>
	</update>

	<!-- 관리자 > 사용자 관리 리스트 > 사용자 정보 수정 > 사용자 삭제 -->
	<delete id="deleteInfo" parameterType="map">
			<![CDATA[
 			DELETE FROM TBL_USR_MGE
			WHERE USRMGEID = #{usrmgeid}
	]]>
	</delete>

    <!-- 관리자 > 사용자 관리 리스트 > 유저별 메뉴 권한 리스트 조회 -->
    <select id="usrMenuAuthList" parameterType="map" resultType="egovMap">
		<![CDATA[
				WITH PROG_LIST
					AS (
						SELECT PROG_ID, PROG_NM, PROG_URL
						FROM SYS_PROG_MNG
					)
					SELECT
						T.MENU_ID
						, T.PAR_MENU_ID
						, T.ORDER_NO
						, T.T_LVL as TREE_LEVEL
						, M.MENU_NM
						, M.PROG_ID
						, M.PROG_NM
						, DECODE( M.PROG_NM, '','', '[' || M.PROG_ID || ']' || M.PROG_NM ) AS PROG_NAME
						, M.PROG_URL
						, M.USE_YN
						, M.MENU_LEVEL
						, DECODE( M.MENU_LEVEL, 3, DECODE(M.USE_YN, 'Y', '사용', 'N', '미사용'), '' ) AS USE_YN_NM
						, (SELECT T.PAR_MENU_ID FROM SYS_MENU_MNG T WHERE T.MENU_ID = M.PAR_MENU_ID ) AS TOP_MENU_ID
						, (SELECT COUNT(MENU_ID) FROM SYS_MENU_MNG T WHERE T.PAR_MENU_ID = M.MENU_ID ) AS CHILD_COUNT
						, (SELECT T.MENU_LEVEL FROM SYS_MENU_MNG T WHERE T.MENU_ID = M.PAR_MENU_ID ) AS PAR_MENU_LEVEL
						, (SELECT T.MENU_NM FROM SYS_MENU_MNG T WHERE T.MENU_ID = M.PAR_MENU_ID ) AS PAR_MENU_NM
						, T.IS_LEAF
						, M.MENU_ORDER_NO
						--,P.MENU_ID AS M_N_1
						--,Q.MENU_ID AS M_N_2
						,(CASE WHEN P.MENU_ID IS NOT NULL AND Q.MENU_ID IS NULL THEN 'TRUE'ELSE 'FALSE' END) AS R_MENU_ID
						,(CASE WHEN C.MENU_ID IS NOT NULL AND D.MENU_ID IS NULL THEN 'TRUE'ELSE 'FALSE' END) AS CU_MENU_ID
			            ,(CASE WHEN G.MENU_ID IS NOT NULL AND H.MENU_ID IS NULL THEN 'TRUE'ELSE 'FALSE' END) AS D_MENU_ID
					FROM
					(
					    SELECT
					        MENU_ID
					        , MENU_NM
					        , NVL((SELECT P.PROG_ID FROM PROG_LIST P WHERE P.PROG_ID = I.PROG_ID), '') AS PROG_ID
					        , NVL((SELECT P.PROG_NM FROM PROG_LIST P WHERE P.PROG_ID = I.PROG_ID), '') AS PROG_NM
					        , NVL((SELECT P.PROG_URL FROM PROG_LIST P WHERE P.PROG_ID = I.PROG_ID), '') AS PROG_URL
					        , USE_YN
					        , MENU_LEVEL
					        , PAR_MENU_ID
					        , MENU_ORDER_NO
					    FROM
					        SYS_MENU_MNG I
					) M,
					(
					    SELECT ROWNUM TR, A.* FROM (
					       SELECT MENU_ID, LEVEL AS T_LVL, PAR_MENU_ID, ORDER_NO,
					              DECODE((SELECT DISTINCT '1'
					                 FROM SYS_MENU_MNG
					                START WITH PAR_MENU_ID = MT.MENU_ID
					                CONNECT BY PRIOR MENU_ID = PAR_MENU_ID),NULL,'true','false') AS IS_LEAF
					         FROM SYS_MENU_MNG MT
					        START WITH PAR_MENU_ID = '0'
					      CONNECT BY PRIOR MENU_ID = PAR_MENU_ID
					        ORDER SIBLINGS BY ORDER_NO
					    ) A
					) T,
			        (
			            SELECT ROLE_ID,MENU_ID
			              FROM SYS_MENU_ROLE_MNG
			             WHERE ROLE_ID = #{roleId} AND ROLE_KND = 'R'
			            UNION
			            SELECT #{roleId} AS ROLE_ID,MENU_ID
			              FROM SYS_MENU_USR_MNG
			             WHERE USR_ID =#{usrId}
			               AND USE_YN = 'Y'
			               AND ROLE_KND = 'R'
			        ) P,
			        (
			            SELECT #{roleId} AS ROLE_ID,MENU_ID
			              FROM SYS_MENU_USR_MNG
			             WHERE USR_ID =#{usrId}
			               AND USE_YN = 'N'
			               AND ROLE_KND = 'R'
			        ) Q,
			        (
			            SELECT ROLE_ID,MENU_ID
			              FROM SYS_MENU_ROLE_MNG
			             WHERE ROLE_ID = #{roleId}  AND ROLE_KND = 'CU'
			            UNION
			            SELECT #{roleId} AS ROLE_ID,MENU_ID
			              FROM SYS_MENU_USR_MNG
			             WHERE USR_ID =#{usrId}
			               AND USE_YN = 'Y'
			               AND ROLE_KND = 'CU'
			        ) C,
			        (
			            SELECT #{roleId} AS ROLE_ID,MENU_ID
			              FROM SYS_MENU_USR_MNG
			             WHERE USR_ID =#{usrId}
			               AND USE_YN = 'N'
			               AND ROLE_KND = 'CU'
			        ) D,
			        (
			            SELECT ROLE_ID,MENU_ID
			              FROM SYS_MENU_ROLE_MNG
			             WHERE ROLE_ID = #{roleId}  AND ROLE_KND = 'D'
			            UNION
			            SELECT #{roleId} AS ROLE_ID,MENU_ID
			              FROM SYS_MENU_USR_MNG
			             WHERE USR_ID =#{usrId}
			               AND USE_YN = 'Y'
			               AND ROLE_KND = 'D'
			        ) G,
			        (
			            SELECT #{roleId} AS ROLE_ID,MENU_ID
			              FROM SYS_MENU_USR_MNG
			             WHERE USR_ID =#{usrId}
			               AND USE_YN = 'N'
			               AND ROLE_KND = 'D'
			        ) H
					WHERE M.MENU_ID = T.MENU_ID
					  AND T.MENU_ID = P.MENU_ID(+)
			          AND T.MENU_ID = Q.MENU_ID(+)
			          AND T.MENU_ID = C.MENU_ID(+)
			          AND T.MENU_ID = D.MENU_ID(+)
			          AND T.MENU_ID = G.MENU_ID(+)
			          AND T.MENU_ID = H.MENU_ID(+)
					ORDER BY T.TR
		]]>
	</select>

	<!-- [사용자 메뉴 권한 삭제]  -->
	<delete id="usrMenuAuthDel" parameterType="map" >
		<![CDATA[
			DELETE SYS_MENU_USR_MNG
			WHERE USR_ID = #{usrId}
		]]>
	</delete>

	<select id="menuMappingList" parameterType="String" resultType="egovMap">
		<![CDATA[
			SELECT MENU_ID
			FROM SYS_MENU_ROLE_MNG
			WHERE ROLE_ID = #{roleId} AND ROLE_KND = #{roleKnd}
		]]>
	</select>

	<!-- [사용자 메뉴 권한 등록]  -->
	<insert id="usrMenuAuthInsert" parameterType="String">
		<![CDATA[
		INSERT INTO SYS_MENU_USR_MNG (USR_ID, MENU_ID, USE_YN,ROLE_KND)
		VALUES (#{usrId}, #{menuId}, #{useYn}, #{roleKnd})
		]]>
	</insert>

</mapper>